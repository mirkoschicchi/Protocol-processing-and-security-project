package fi.utu.protproc.group3.protocols.bgp4;

import fi.utu.protproc.group3.protocols.EthernetFrame;
import fi.utu.protproc.group3.protocols.IPv6Packet;
import fi.utu.protproc.group3.protocols.tcp.TCPDatagram;
import fi.utu.protproc.group3.utils.StringUtils;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertSame;

public class BGP4MessageOpenTest {

    @Test
    public void createMessage() {
        var message = BGP4MessageOpen.create((short) 1, (short) 2, 3);
        assertNotNull(message);


        var bytes = message.serialize();
        assertNotNull(bytes);
        assertTrue(bytes.length == 29);

        var parsedMsg = (BGP4MessageOpen) BGP4Message.parse(bytes);
        assertTrue(Arrays.equals(message.getMarker(), parsedMsg.getMarker()));
        assertSame(message.getType(), parsedMsg.getType());
        assertSame(message.getLength(), parsedMsg.getLength());
        assertSame(message.getVersion(), parsedMsg.getVersion());
        assertSame(message.getMyAutonomousSystem(), parsedMsg.getMyAutonomousSystem());
        assertSame(message.getHoldTime(), parsedMsg.getHoldTime());
        assertSame(message.getBGPIdentifier(), parsedMsg.getBGPIdentifier());
    }

    @Test
    public void parseMessage() {
        var pdu = StringUtils.parseHexStream("22d961ebb1f82f202a295c8686dd6000000000310680200300040000000026ae89569c37dd8120030001000000005f8b9a6cf08416b7303900b30760cd4b0000000050000000a9400000ffffffffffffffffffffffffffffffff001d0104000100020000000300");
        var frame = EthernetFrame.parse(pdu);
        var packet = IPv6Packet.parse(frame.getPayload());
        var datagram = TCPDatagram.parse(packet.getPayload());
        var message = BGP4Message.parse(datagram.getPayload());
        assertNotNull(message);
        assertEquals(29, message.getLength());
        assertTrue(message instanceof BGP4MessageOpen);
        var open = (BGP4MessageOpen) message;
        assertEquals((short)1, open.getMyAutonomousSystem());
        assertEquals((short)2, open.getHoldTime());
        assertEquals(3, open.getBGPIdentifier());
    }
}
